openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/prakashsingha/inventoryAPI/1.0.0
  - url: http://api.demo-dev.com/productAPI/v1
    description: For internal development use
  - url: https://api.demo-stag.com/productAPI/v1
    description: For internal staging use
info:
  description: This is an inventory API
  version: "1.0.0"
  title: Inventory API
  contact:
    email: prakashsingha@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

paths:
  /warehouses:
    get:
      summary: searches warehouse
      operationId: searchWarehouse
      description: |
        By passing in the appropriate options, you can search for
        available warehouses in the system
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: searchString
          description: pass an optional search string for looking up warehouse
          required: false
          schema:
            type: string
        - in: query
          name: skip
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WarehouseItem'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      summary: adds a warehouse item
      operationId: addWarehouse
      description: Adds a warehouse to the system
      security:
        - bearerAuth: []
      responses:
        '201':
          description: warehouse created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WarehouseItem'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          description: an existing warehouse already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                location:
                  type: string
        description: Warehouse details to add
        
  /warehouses/{id}:
    get:
      summary: Returns a warehouse
      operationId: getWarehouse
      description: |
        This resource represents an warehouse in the system.
        Each warehouse is identified by an `id`.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Warehouse ID
          required: true
          schema:
            type: string
            format: uuid
        
      responses:
        '200':
          description: return result matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WarehouseItem'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Deletes a warehouse
      operationId: deleteWarehouse
      description: |
        This resource represents an warehouse in the system.
        Each warehouse is identified by an `id`.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Warehouse ID
          required: true
          schema:
            type: string
            format: uuid
        
      responses:
        '204':
          description: The resource was deleted successfully.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /products:
    get:
      summary: searches product
      operationId: searchProduct
      description: |
        By passing in the appropriate options, you can search for
        available products in the system
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: searchString
          description: pass an optional search string for looking up products
          required: false
          schema:
            type: string
        - in: query
          name: skip
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductItem'
        '400':
          description: bad input parameter
    post:
      summary: adds a product item
      operationId: addProduct
      description: Adds a product to the system
      security:
        - bearerAuth: []
      responses:
        '201':
          description: product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductItem'
        '400':
          description: invalid input, object invalid
        '409':
          description: an existing product already exists
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Product 1
                costPrice:
                  type: number
                  format: float
                  example: 140.05
                sellingPrice:
                  type: number
                  format: float
                  example: 150.90
                warehouseId:
                  type: string
                  format: uuid
        description: Product details to add
        
  /products/{id}:
    get:
      summary: Returns a product
      operationId: getProduct
      description: |
        This resource represents a product in the system.
        Each product is identified by an `id`.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Product ID
          required: true
          schema:
            type: string
            format: uuid
        
      responses:
        '200':
          description: return result matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductItem'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Deletes a product
      operationId: deleteProduct
      description: |
        This resource represents an product in the system.
        Each product is identified by an `id`.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Product ID
          required: true
          schema:
            type: string
            format: uuid
        
      responses:
        '204':
          description: The resource was deleted successfully.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: A warehouse with the specified ID was not found.
    patch:
      summary: Updates a product fields like stock/unstock
      operationId: updateProduct
      description: |
        This resource represents an product in the system.
        Each product is identified by an `id`.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Product ID
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: product data in json format
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
        required: true
      responses:
        '204':
          description: The resource was updated successfully.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: A warehouse with the specified ID was not found.
          
  /users/register:
    post:
      summary: Creates a new user
      operationId: addUser
      description: Adds a user in the system
      responses:
        '201':
          description: user created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserItem'
        '400':
          description: invalid input, object invalid
        '409':
          description: username already exists
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: user-john
                password:
                  type: string
                  example: a#923k9L3
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  format: email
        description: User details to add
        
  /users/login:
    post:
      summary: Login successfully returns a token
      operationId: login
      description: Authenticates a user to the system
      responses:
        '200':
          description: logged in and token generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    example: user-john
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE2MDM5NTU4MDQsImV4cCI6MTYwMzk1OTQwNCwiYXVkIjpbXSwiaXNzIjoiSU5WRU5UT1JZX0FQUCIsInN1YiI6InByYWthc2g0In0.H_XJTMVg9lYoZScH-SAb2j0CTtLMAPlaKrUU_ADdn_E
        '400':
          description: invalid input, object invalid
        '409':
          description: username already exists
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: user-john
                password:
                  type: string
                  example: a#923k9L3

        description: user details to log in
        
  /users/logout:
    post:
      summary: Logs out from accessing the protected resources
      operationId: logout
      description: Logs out of the system
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully logged out
        '401':
          description: Not authorized
      

components:
  responses:
      NotFound:
        description: The specified resource was not found
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
      Unauthorized:
        description: Unauthorized
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
  
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
      
      
  schemas:
    # Schema for error response body
    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
      required:
        - code
        - message
        
    WarehouseItem:
      type: object
      required:
        - name
        - location
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        name:
          type: string
          example: Warehouse 1
        location:
          type: string
          example: SS14, Petaling Jaya
        createdAt:
          type: string
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
        updatedAt:
          type: string
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
    ProductItem:
      type: object
      required:
        - name
        - costPrice
        - sellingPrice
        - warehouseId
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        name:
          type: string
          example: Product 1
        costPrice:
          type: number
          format: float
          example: 55.10
        sellingPrice:
          type: number
          format: float
          example: 60.00
        quantity:
          type: integer
          example: 100
        warehouseId:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        createdAt:
          type: string
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
        updatedAt:
          type: string
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
    UserItem:
      type: object
      required:
        - username
        - password
        - name
        - email
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        username:
          type: string
          example: user1
        password:
          type: string
          example: password123
        name:
          type: string
          example: John Doe
        email:
          type: string
          format: email
          example: hello@xyz.com
        createdAt:
          type: string
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
        updatedAt:
          type: string
          format: date-time
          example: '2016-08-29T09:12:33.001Z'